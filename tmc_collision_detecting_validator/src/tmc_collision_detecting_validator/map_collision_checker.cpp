/*
Copyright (c) 2024 TOYOTA MOTOR CORPORATION
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted (subject to the limitations in the disclaimer
below) provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
* Neither the name of the copyright holder nor the names of its contributors may be used
  to endorse or promote products derived from this software without specific
  prior written permission.
NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
*/
#include "map_collision_checker.hpp"

#include <algorithm>
#include <vector>

#include <tf2_eigen/tf2_eigen.hpp>

namespace {
// WORLD_JOINT: Virtual joint between robot Odometry (ODOM) and robot orbital
const char* const kBaseJointName = "world_joint";
// It may be better to use parameters
const uint8_t kOccupancyFree = 0;

uint32_t GetTargetJointIndex(const std::vector<std::string>& joint_names, const std::string& target_joint) {
  return std::distance(joint_names.begin(), std::find(joint_names.begin(), joint_names.end(), target_joint));
}

void OccupancyGridMsgToOccupancyGrid(
    const nav_msgs::msg::OccupancyGrid& msg,
    tmc_manipulation_types::OccupancyGrid& map) {
  map.info.resolution = msg.info.resolution;
  map.info.width = msg.info.width;
  map.info.height = msg.info.height;
  tf2::fromMsg(msg.info.origin, map.info.origin);
  map.data.clear();
  std::copy(msg.data.begin(), msg.data.end(), std::back_inserter(map.data));
}
}  // anonymous namespace

namespace tmc_collision_detecting_validator {

MapCollisionChecker::MapCollisionChecker(const rclcpp::Node::SharedPtr& node, const std::string& map_topic_name)
    : MapCollisionChecker(node, map_topic_name, nullptr) {}

MapCollisionChecker::MapCollisionChecker(const rclcpp::Node::SharedPtr& node, const std::string& map_topic_name,
                                         const tmc_utils::DynamicParameter<bool>::Ptr& verbose)
    : map_frame_to_trajectory_origin_(Eigen::Affine3d::Identity()),
      logger_(node->get_logger()), verbose_(verbose), map_topic_name_(map_topic_name) {
  // TODO(Takeshita) QoS settings
  map_sub_ = node->create_subscription<nav_msgs::msg::OccupancyGrid>(
      map_topic_name, 1, std::bind(&MapCollisionChecker::MapCallback, this, std::placeholders::_1));
}

bool MapCollisionChecker::IsFeasible(
    const tmc_manipulation_types::TimedRobotTrajectory& trajectory,
    std::function<bool()> interrupt) {
  // If the MAP is empty, it does not collide
  if (map_.data.empty()) {
    return true;
  }

  const auto map_origin_to_map_frame = map_.info.origin.inverse();
  const auto map_origin_to_trajectory_origin = map_origin_to_map_frame * map_frame_to_trajectory_origin_;

  // The orbit generated by RobotlocalPlanner is specification containing movement information.
  uint32_t base_index = GetTargetJointIndex(trajectory.multi_dof_joint_trajectory.joint_names, kBaseJointName);
  if (base_index == trajectory.multi_dof_joint_trajectory.joint_names.size()) {
    return false;
  }

  for (const auto& point : trajectory.multi_dof_joint_trajectory.points) {
    if (interrupt()) {
      return false;
    }
    if (base_index >= point.transforms.size()) {
      return false;
    }
    if (IsRobotInCollision(map_origin_to_trajectory_origin * point.transforms[base_index])) {
      if (verbose_ && verbose_->value()) {
        RCLCPP_INFO(logger_, "Point (%f, %f) is in the obstacle area on the map %s",
                    point.transforms[base_index].translation().x(), point.transforms[base_index].translation().y(),
                    map_topic_name_.c_str());
      }
      return false;
    }
  }
  return true;
}

void MapCollisionChecker::MapCallback(const nav_msgs::msg::OccupancyGrid::SharedPtr msg) {
  OccupancyGridMsgToOccupancyGrid(*msg, map_);
  map_frame_ = msg->header.frame_id;
}

bool MapCollisionChecker::IsRobotInCollision(const Eigen::Affine3d& robot_position) const {
  int32_t grid_x = std::floor(robot_position.translation().x() / map_.info.resolution);
  int32_t grid_y = std::floor(robot_position.translation().y() / map_.info.resolution);
  if (grid_x < 0 || grid_y < 0 || grid_x > map_.info.width - 1 || grid_y > map_.info.height - 1) {
    return false;
  }

  if (map_.data[grid_x + map_.info.width * grid_y] > kOccupancyFree) {
    return true;
  } else {
    return false;
  }
}

}  // namespace tmc_collision_detecting_validator
